enum Gender {
	MALE
	FEMALE
}

enum RecordType {
	User
	File
}
enum Roles {
	ADMIN
	USER
}
enum AccountStateType {
	PENDING
	FINALIZED
}

type Users {
	users: [User!]
}
input AddressInput {
	city: String!
	town: String!
	postalAddress: String!
	secondAddress: String
}
enum VerificationType {
	CIN
	PASSPORT
	PERMIS
}
input Verification {
	type: VerificationType
	verificationImage: [String]
}
input UserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender!
}

input CreateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean
	verification: Verification
	gender: Gender
}

input UpdateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender
	identityVerified: Boolean
	isActive: Boolean
}
input AdminUpdateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender!
	identityVerified: Boolean
}

input LoginUserInput {
	email: String! @length(max: 7)
	password: String!
	birthDate: String
}

type LoginResponse {
	accessToken: String!
	refreshToken: String!
}

type RefreshTokenResponse {
	accessToken: String!
}

type Local {
	email: String
	password: String
}
type Grille {
	_id: ID!
	userId: ID!
	numbers: [Int]
	stars: [Int]
	DrawDate: Date
	createdAt: Date
	updatedAt: Date
	deletedAt: Date
	status: Status
	randomCode: String
	prise: Int
}

type UserVerificationData {
	verificationImage: [String]
	type: String
	isVerified: Boolean
}

type Google {
	_id: String
	token: String
	name: String
	email: String
}

type Facebook {
	_id: String
	token: String
	name: String
	email: String
}
type Address {
	city: String!
	town: String!
	postalAddress: String!
	secondAddress: String
}

input UserFilterInput {
	firstName: String
	lastName: String
}

type Favorites {
	numbers: [Int]
	stars: [Int]
}

input AddFavoritesInput {
	numbers: [Int]
	stars: [Int]
}
enum VerificationStatus {
	NO_DOCUMENTS
	PROCESSING
	REJECTED
	ACCEPTED
}

type VerificationProcess {
	verificationStatus: VerificationStatus!
	verificationMessage: String
}

type User {
	_id: ID!
	walletId: ID
	userVerificationData: UserVerificationData
	local: Local!
	grilles: [Grille]
	favorites: [Favorites]
	google: Google
	facebook: Facebook
	firstName: String
	lastName: String
	avatar: String
	pseudoName: String
	secondeName: String
	thirdName: String
	termsOfUse: Boolean
	gender: Gender
	birthDate: String
	phoneNumber: String!
	address: Address
	resetPasswordToken: String
	resetPasswordExpires: Float
	fullName: String @upper
	isVerified: Boolean!
	identityVerified: Boolean!
	isActive: Boolean
	ccLast4: String
	createdAt: Date!
	updatedAt: Date!
	deletedAt: Date
	userLimitationId: String
	userLimitation: UserLimitation
	wallet: Wallet
	userRole: Roles
	verificationDoc: VerificationProcess!
	notifications: [UserNotification]!
	lastLogin: Date
}
enum VerificationTypeFilter {
	EMAIL
	IDENTITY
}
input FilterInput {
	isVerified: Boolean
	type: VerificationTypeFilter
	region: String
}
input VerificationProcessInput {
	userId: ID!
	status: VerificationStatus!
	message: String!
}
input AdminCreateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean
	verification: Verification
	gender: Gender
	role: Roles
}

type StatsResponse {
	usersNum: Int!
	grillesNum: Int!
	paiedGrillesNum: Int!
	notPaiedGrillesNum: Int!
	jackpotGrillesNum: Int!
	winningGrillesNum: Int!
	verifiedUsers: Int!
	nonVerifiedUsers: Int!
	winningSequencesNum: Int!
}
type Query {
	me: User @isAuthenticated
	users(offset: Int, limit: Int, filter: FilterInput): [User!]
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	user(_id: ID!): User @isAuthenticated @hasPermission(permission: "ADMIN")
	#finalizedUsers(offset: Int, limit: Int): [User!] @isAuthenticated
	#finalizedUser(_id: ID!, filter: UserFilterInput): User @isAuthenticated
	searchUsersByDate(createdAt: String): [User]
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	checkUserByEmail(email: String): Boolean
	getUsersByVerificationStatus(input: VerificationStatus!): [User]!
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	adminStats: StatsResponse!
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	getAllUsers: [User]! @isAuthenticated
	getUsersByLastLoginDate: [User]!
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
}

type Mutation {
	createUser(
		input: CreateUserInput! @validate(schema: "createUserRegister")
	): User
		@rateLimit(window: "5s", max: 1, message: "You are doing that too often.")
	updateUser(
		_id: ID!
		input: UpdateUserInput! @validate(schema: "updateUserRegister")
	): Boolean @isAuthenticated
	updateUserAvatar(_id: ID!, file: Upload!): Boolean @isAuthenticated
	updateUserDocs(
		_id: ID!
		files: [Upload]!
		filesType: VerificationType
	): Boolean @isAuthenticated
	verifyEmail(emailToken: String!): Boolean
	login(
		input: LoginUserInput! @validate(schema: "loginUserRegister")
	): LoginResponse
	refreshToken(refreshToken: String!): RefreshTokenResponse

	changePassword(
		_id: ID!
		currentPassword: String!
		password: String!
	): Boolean @isAuthenticated
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
	addFavorites(input: AddFavoritesInput!): User @isAuthenticated
	verifyUserDocuments(input: VerificationProcessInput!): Boolean
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	adminCreateUser(input: AdminCreateUserInput!): User!
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	adminChangeUserPassword(_id: ID!, password: String!): Boolean
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	deleteUser(_id: ID!): Boolean
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	deleteUsers: Boolean! @isAuthenticated @hasPermission(permission: "ADMIN")
	adminUpdateUser(_id: ID!, input: UpdateUserInput!): Boolean
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
	adminLogin(input: LoginUserInput!): LoginResponse

	adminActivateUser(_id: ID!): User
		@isAuthenticated
		@hasPermission(permission: "ADMIN")

	adminDeactivateUser(_id: ID!): User
		@isAuthenticated
		@hasPermission(permission: "ADMIN")
}

type Subscription {
	newUser: User @isAuthenticated
}
