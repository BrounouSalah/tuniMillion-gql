enum Gender {
	MALE
	FEMALE
}

enum RecordType {
	User
	File
}

enum AccountStateType {
	PENDING
	FINALIZED
}

type Users {
	users: [User!]
}
input AddressInput {
	city: String!
	town: String!
	postalAddress: String!
	secondAddress: String
}
enum VerificationType {
	CIN
	PASSPORT
	PERMIS
}
input Verification {
	type: VerificationType
	verificationImage: FileInput
}
input UserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender!
}

input FileInput {
	filename: String
}

input CreateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender!
}

input UpdateUserInput {
	firstName: String!
	pseudoName: String
	secondeName: String
	thirdName: String
	lastName: String!
	email: String!
	password: String!
	birthDate: String!
	phoneNumber: String!
	address: AddressInput!
	termsOfUse: Boolean!
	verification: Verification
	gender: Gender!
}

input LoginUserInput {
	email: String! @length(max: 7)
	password: String!
}

type LoginResponse {
	accessToken: String!
	refreshToken: String!
}

type RefreshTokenResponse {
	accessToken: String!
}

type Local {
	email: String
	password: String
}

type UserVerificationData {
	verificationImage: Upload
	type: String
}

type Google {
	_id: String
	token: String
	name: String
	email: String
}

type Facebook {
	_id: String
	token: String
	name: String
	email: String
}
type Address {
	city: String!
	town: String!
	postalAddress: String!
	secondAddress: String
}

input UserFilterInput {
	firstName: String
	lastName: String
}

type User {
	_id: ID!
	walletId: ID
	userverificationData: UserVerificationData
	local: Local!
	google: Google
	facebook: Facebook
	firstName: String
	lastName: String
	avatar: String
	pseudoName: String
	secondeName: String
	thirdName: String
	termsOfUse: Boolean
	gender: Gender
	birthDate: String
	phoneNumber: String!
	address: Address
	resetPasswordToken: String
	resetPasswordExpires: Float
	fullName: String @upper
	isVerified: Boolean!
	isActive: Boolean
	ccLast4: String
	createdAt: Date!
	updatedAt: Date!
	deletedAt: Date
}

type Query {
	me: User @isAuthenticated
	users(offset: Int, limit: Int): [User!] @isAuthenticated
	user(_id: ID!): User #@isAuthenticated
	finalizedUsers(offset: Int, limit: Int): [User!] @isAuthenticated
	finalizedUser(_id: ID!, filter: UserFilterInput): User @isAuthenticated
}

type Mutation {
	createUser(
		input: CreateUserInput! @validate(schema: "createUserRegister")
	): User
		@rateLimit(window: "5s", max: 1, message: "You are doing that too often.")
	updateUser(
		_id: ID!
		input: UpdateUserInput! @validate(schema: "updateUserRegister")
	): Boolean @isAuthenticated
	updateUserAvatar(_id: ID!, file: Upload!): Boolean @isAuthenticated

	updateUserVerificationData(
		_id: ID!
		picture: Upload!
		document: String!
	): Boolean @isAuthenticated
	deleteUser(_id: ID!): Boolean @isAuthenticated
	deleteUsers: Boolean! @isAuthenticated
	verifyEmail(emailToken: String!): Boolean
	login(
		input: LoginUserInput! @validate(schema: "loginUserRegister")
	): LoginResponse
	refreshToken(refreshToken: String!): RefreshTokenResponse

	changePassword(
		_id: ID!
		currentPassword: String!
		password: String!
	): Boolean @isAuthenticated
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
}

type Subscription {
	newUser: User @isAuthenticated
}
