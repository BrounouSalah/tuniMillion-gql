enum Gender {
	UNKNOWN
	MALE
	FEMALE
}

enum RecordType {
	User
	File
}

enum AccountStateType {
	PENDING
	FINALIZED
}

type Users {
	users: [User!]
}

union Result = User | File
union UserResult = User | Users

input UserInput {
	firstName: String
	lastName: String
	email: String
	password: String
	birthDate: String
	phoneNumber: String
	address: String
}

input FileInput {
	filename: String
}

input RecordInput {
	User: UserInput
	File: FileInput
}

input CreateUserInput {
	firstName: String
	lastName: String
	email: String!
	password: String
	#gender: Gender
	birthDate: String
	phoneNumber: String!
	address: String
}

input UpdateUserInput {
	connectedPageId: ID
	firstName: String
	lastName: String
	birthDate: String
	phoneNumber: String
	address: String
	uSubscriptionCost: Float
}

input LoginUserInput {
	email: String! @length(max: 7)
	password: String!
}

input SearchInput {
	select: [String!]
	where: RecordInput
	start: Float
	end: Float
	order: JSONObject
	skip: Int
	take: Int
}

type LoginResponse {
	accessToken: String!
	refreshToken: String!
}

type RefreshTokenResponse {
	accessToken: String!
}

type Local {
	email: String
	password: String
}

type UserVerificationData {
	picture: Upload!
	document: String!
}

type Google {
	_id: String
	token: String
	name: String
	email: String
}

type Facebook {
	_id: String
	token: String
	name: String
	email: String
}

enum UserType {
	BASIC # $0
	PREMIUM # $9.99
}

input UserFilterInput {
	firstName: String
	lastName: String
}

type User {
	_id: ID!
	walletId: ID
	userverificationData: UserVerificationData
	local: Local!
	google: Google
	accountState: AccountStateType
	facebook: Facebook
	firstName: String
	lastName: String
	avatar: String
	background: String
	birthDate: String
	phoneNumber: String!
	address: String
	resetPasswordToken: String
	resetPasswordExpires: Float
	fullName: String @upper
	isVerified: Boolean!
	isOnline: Boolean!
	isLocked: Boolean!
	reason: String!
	isActive: Boolean!
	stripeId: String
	ccLast4: String
	createdAt: Date!
	updatedAt: Date!
	deletedAt: Date
}

type Query {
	hello: String!
		@rateLimit(window: "2s", max: 1, message: "You are doing that too often.")
	me: User @isAuthenticated
	users(offset: Int, limit: Int): [User!] @isAuthenticated
	user(_id: ID!): User #@isAuthenticated
	finalizedUsers(offset: Int, limit: Int): [User!] @isAuthenticated
	finalizedUser(_id: ID!, filter: UserFilterInput): User @isAuthenticated
	search(conditions: SearchInput!): [Result]! @isAuthenticated
	searchUser(userIds: [ID!]): UserResult!
		@rateLimit(window: "3s", max: 1, message: "You are doing that too often.")
	# today: Date @date @hasScope(scope: [“read:rating”])
	today: Date @date
}

type Mutation {
	createUser(
		input: CreateUserInput! @validate(schema: "createUserRegister")
	): User
		@rateLimit(window: "5s", max: 1, message: "You are doing that too often.")

	createUserAuth(input: String!): User @isAuthenticated

	updateUser(
		_id: ID!
		input: UpdateUserInput! @validate(schema: "updateUserRegister")
	): Boolean @isAuthenticated
	updateUserAvatar(_id: ID!, file: Upload!): Boolean @isAuthenticated
	updateUserBackgroundAvatar(_id: ID!, file: Upload!): Boolean @isAuthenticated
	updateUserVerificationData(
		_id: ID!
		picture: Upload!
		document: String!
	): Boolean @isAuthenticated
	deleteUser(_id: ID!): Boolean @isAuthenticated
	deleteUsers: Boolean! @isAuthenticated
	verifyEmail(emailToken: String!): Boolean
	login(
		input: LoginUserInput! @validate(schema: "loginUserRegister")
	): LoginResponse
	refreshToken(refreshToken: String!): RefreshTokenResponse
	lockAndUnlockUser(_id: ID!, reason: String!): Boolean @isAuthenticated
	changePassword(
		_id: ID!
		currentPassword: String!
		password: String!
	): Boolean @isAuthenticated
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
	createSubscription(source: String!, ccLast4: String!): User @isAuthenticated
	changeCreditCard(source: String!, ccLast4: String!): User @isAuthenticated
	# cancelSubscription: User @isAuthenticated
	validateUser(
		text: String!
		input: CreateUserInput! @validate(schema: "createUserRegister")
	): Boolean
}

type Subscription {
	newUser: User @isAuthenticated
}
